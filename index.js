require("dotenv").config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require("grammy");

const bot = new Bot(process.env.BOT_API_KEY);

// ==== –º–µ–Ω—é, –≤–Ω–∏–∑—É, —É–¥–æ–±–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ
bot.api.setMyCommands([
  {
    command: "start",
    description: "–ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞",
  },
  {
    command: "hello",
    description: "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è",
  },
  {
    command: "hello_ksu",
    description: "–î–ª—è –ö—Å—é—à—ñ",
  },
  {
    command: "mood",
    description: "–Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π?",
  },
  {
    command: "share",
    description: "–ö–æ–Ω—Ç–∞–∫—Ç–∏ –∞–±–æ –æ–ø—Ä–æ—Å–Ω–∏–∫?",
  },
  {
    command: "inline_keyboard",
    description: "–Ü–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞",
  },
]);

// —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ ctx.msg –∏–ª–∏ –∂–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–∏–µ–ª–µ ctx.from –∏–ª–∏ –∂–µ –æ–± –±–æ—Ç–µ ctx.me
// bot.on("msg", async (ctx) => {
//   console.log(ctx.from);
// });

// ======= –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥–∏, —á—Ç–æ –º—ã –∑–∞–¥–∞–ª–∏
bot.command("start", async (ctx) => {
  await ctx.react("üëç");
  await ctx.reply(
    "–¢–∞ —è –Ω–µ —ñ–≥–Ω–æ—Ä—é —Ç–µ–±–µ, –ø—Ä–æ—Å—Ç–æ *—â–µ –Ω–µ –¥—É–∂–µ –±–∞–≥–∞—Ç–æ* —Ç—É—Ç –Ω–∞–≤—á–∏–≤—Å—è —Ä–æ–±–∏—Ç–∏\\. _–Ø —â–µ –º–æ–ª–æ–¥–∏–π Bot_ [–æ—Å—å –∫—Ä–∞—â–µ —Ç—Ä–∏–º–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫—É](https://t.me/xxenia22)",
    { parse_mode: "MarkdownV2" }
  );
});

// //======–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ 1 —Å–ø–æ—Å—ñ–±
// bot.command("mood", async (ctx) => {
//   const moodKeyboard = new Keyboard()
//     .text("–í–∑–∞–≥–∞–ª—ñ —Å—É–ø–µ—Ä")
//     .row()
//     .text("–í—Å–µ –¥–æ–±—Ä–µ")
//     .text("–¢–∞ –Ω–æ—Ä–º, –Ω—ñ—á–æ–≥–æ")
//     .resized()
//     .oneTime()
//     .row()
//     .text("–ü–æ–≥–∞–Ω–æ");
//   await ctx.reply("–Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π?", {
//     reply_markup: moodKeyboard,
//   });
// });

//======–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ 2 —Å–ø–æ—Å—ñ–±
bot.command("mood", async (ctx) => {
  const moodLabels = [
    "–í–∑–∞–≥–∞–ª—ñ —Å—É–ø–µ—Ä",
    "–í—Å–µ –¥–æ–±—Ä–µ",
    "–¢–∞ –Ω–æ—Ä–º, –Ω—ñ—á–æ–≥–æ",
    "–ü–æ–≥–∞–Ω–æ",
  ];
  const rows = moodLabels.map((label) => {
    return [Keyboard.text(label)];
  });
  const moodKeyboard2 = Keyboard.from(rows)
    .resized()
    .oneTime()
    .placeholder("–Æ —Ç–∞—á –º—ñ —Ç–∞–ª–∞–ª–∞–π");

  await ctx.reply("–Ø–∫ –Ω–∞—Å—Ç—Ä—ñ–π?", {
    reply_markup: moodKeyboard2,
  });
});

bot.command("share", async (ctx) => {
  const shareKeyboard = new Keyboard()
    .requestLocation("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è")
    .requestContact("–ö–æ–Ω—Ç–∞–∫—Ç")
    .requestPoll("–û–ø—Ä–æ—Å–Ω–∏–∫")
    .resized();

  await ctx.reply("–ù—É –¥–∞–≤–∞–π, –ø–æ—á–Ω–µ–º–æ", {
    reply_markup: shareKeyboard,
  });
});

bot.command("inline_keyboard", async (ctx) => {
  const inlineKeyboard = new InlineKeyboard()
    .text("1", "button-1")
    .text("2", "button-2")
    .text("3", "button-3");

  await ctx.reply("–û–±–µ—Ä—ñ—Ç—å —Ü–∏—Ñ—Ä—É", {
    reply_markup: inlineKeyboard,
  });
});

bot.callbackQuery(/button-[1-3]/, async (ctx) => {
  // ctx.answerCallbackQuery("–í–∏ –æ–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É!!!");
  // await ctx.reply(`–í–∏ –æ–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É ${ctx.callbackQuery}`);
  await ctx.answerCallbackQuery();
  await ctx.reply(`–í–∏ –æ–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É: ${ctx.callbackQuery.data}`);
});

// bot.on("callback_query:data", async (ctx) => {
//   await ctx.answerCallbackQuery();
//   await ctx.reply(`–í–∏ –æ–±—Ä–∞–ª–∏ —Ü–∏—Ñ—Ä—É: ${ctx.callbackQuery.data}`);
// });

//================
bot.hears("–í–∑–∞–≥–∞–ª—ñ —Å—É–ø–µ—Ä", async (ctx) => {
  await ctx.reply("–û–±–æ–∂–Ω—é—é, —â–æ –≤ —Ç–µ–±–µ –∑–∞–≤–∂–¥–∏ –≥–∞—Ä–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π!");
});

bot.command(["say_hello", "hello", "hi", "say_hi"], async (ctx) => {
  await ctx.reply("–ü—Ä–∏–≤—ñ—Ç –º–∞–ª–∞, —è–∫ —Å–ø—Ä–∞–≤–∏? –õ–µ–∂–∏—à? –°–µ—Ä—ñ–∞–ª –¥–∏–≤–∏—à—Å—è?");
});

bot.command(["hello_ksu"], async (ctx) => {
  await ctx.react("üî•");
  await ctx.reply("–û–≥–æ —è–∫–∞ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ –≤—Ä–æ–¥–ª–∏–≤–∞ <3", {
    reply_parameters: { message_id: ctx.msg.message_id },
  });
});

// =============== –µ—Å–ª–∏ –µ—Ç—Å—å —Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –±–ª—è, —Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —á—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ —Ä—É–≥–∞—Ç—å—Å—è
bot.hears(/–±–ª—è/, async (ctx) => {
  await ctx.reply("–°–≤–∞—Ä–∏–º–æ—Å—å? –ù–µ —Ç—Ä–µ–±–∞.");
});

bot.hears(["id", "ID", "Id"], async (ctx) => {
  await ctx.reply(`–í–∞—à ID:${ctx.from.id}`);
});

//======================= –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ –≥–æ–ª–æ—Å
bot.on(":text", async (ctx) => {
  await ctx.reply("–¶—ñ–∫–∞–≤–æ –Ω–∞–ø–∏—Å–∞–ª–∞, –∞–ª–µ —Ä–µ–±–∞ —Ç—Ä–æ—Ö–∏ –ø–æ–¥—É–º–∞—Ç–∏...");
});
bot.on(":photo", async (ctx) => {
  await ctx.reply("–û—Ü–µ —è —Ä–æ–∑—É–º—ñ—é –º–∞–ª—é–Ω–æ–∫, –æ—Ü–µ —Ñ–æ—Ç–æ–∫–∞—Ä—Ç–æ—á–∫–∞)))");
});
bot.on(":voice", async (ctx) => {
  await ctx.reply(
    "–°–ª—É—Ö–∞–π, –∑–∞—Ä–∞–∑ –Ω–µ –¥—É–∂–µ –∑—Ä—É—á–Ω–æ –æ—Ç–æ —Å–ª—É—Ö–∞—Ç–∏ —Ü–µ –≤—Å–µ, –¥–∞–≤–∞–π —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ, –æ–∫?"
  );
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const e = e.error;

  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();
